#include <Arduino.h>
#include <WiFi.h>
#include <WebServer.h>

const int LED_PIN = 2; // Pin for controlling the bulb
const int AUDIO_PIN = A0; // Pin for receiving audio input
const int WEB_SERVER_PORT = 80; // Port for the web server

WebServer server(WEB_SERVER_PORT); // Create a web server object

void handleRoot() {
  // HTML code for the upload form
  String html = "<form method='POST' action='/upload' enctype='multipart/form-data'>"
                "<input type='file' name='music_file'>"
                "<input type='submit' value='Upload'>"
                "</form>";
  server.send(200, "text/html", html); // Send the HTML code to the client
}

void handleUpload() {
  // Check if a file was uploaded
  if (server.hasArg("music_file")) {
    HTTPUpload& upload = server.upload(); // Get the uploaded file
    if (upload.status == UPLOAD_FILE_START) {
      // Process the uploaded file
      // You can use an FFT library to analyze the frequency spectrum of the audio file
      // and control the bulb based on the frequency of the music
    }
  }
  server.send(200, "text/plain", "File uploaded"); // Send a response to the client
}

void setup() {
  pinMode(LED_PIN, OUTPUT); // Set LED_PIN as an output pin
  WiFi.begin(); // Connect to WiFi network
  server.on("/", handleRoot); // Set the root handler
  server.on("/upload", HTTP_POST, handleUpload); // Set the upload handler
  server.begin(); // Start the web server
}

void loop() {
  server.handleClient(); // Handle client requests
  int audioValue = analogRead(AUDIO_PIN); // Read audio input
  int brightness = map(audioValue, 0, 1023, 0, 255); // Scale audio value to 0-255 range
  analogWrite(LED_PIN, brightness); // Set brightness of the bulb
  delay(100); // Delay for stability
}
